pipeline {
    agent any
    
    environment {
        // Definir variáveis de ambiente
        MY_VARIABLE = 'var'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS') //define tempo de timeout
        buildDiscarder(logRotator(numToKeepStr: '10')) // mantém um número máximo de builds (neste caso, 10) e descarta os mais antigos quando esse limite é atingido.
    }
    
    parameters {
        // Definir parâmetros para o pipeline
        string(name: 'PARAMETER_NAME', defaultValue: 'valor_padrao', description: 'Descrição do parâmetro')
    }
    
    triggers {
        // Definir o gatilho para iniciar o pipeline
        cron('H */4 * * 1-5')
    }
    
    stages {
        stage('Clonar Repositório') {
            steps {
                // Clonar o repositório do GitHub
                git 'https://github.com/krolcm/Trabalho-DEVOPS-PUC.git'
            }
        }
        
        stage('Instalar Dependências') {
            steps {
                // Instalar as dependências do projeto
                bat 'npm install'
            }
        }
        
        stage('Executar Testes') {
            steps {
                // Executar os testes Cypress em primeiro plano
                bat './node_modules/.bin/cypress run --reporter-options configFile=package.json'
            }
        }
        
        stage('Input Stage') {
            steps {
                // Aguardar entrada do usuário
                input(message: 'Por favor, confirme se deseja continuar')
            }
        }
        
        stage('Parallel Stages') {
            parallel {
                stage('Parallel Stage 1') {
                    steps {
                        // Passos para a etapa paralela 1
                        echo 'Executando etapa paralela 1'
                    }
                }
                stage('Parallel Stage 2') {
                    steps {
                        // Passos para a etapa paralela 2
                        echo 'Executando etapa paralela 2'
                    }
                }
            }
        }
        
        stage('Matrix Stage') {
            matrix {
                axes {
                    axis {
                        name 'AXIS_NAME'
                        values 'VALUE_1', 'VALUE_2'
                    }
                }
                stages {
                    stage('Matrix Stage') {
                        steps {
                            // Passos para a etapa da matriz
                            echo "Executando etapa da matriz com ${AXIS_NAME}"
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'pipeline bem-sucedido.'
        }
        
        failure {
            echo 'pipeline falhou.'
        }
        when {
            expression { PARAMETER_NAME == 'valor_padrao' }
        }
        not {
            expression { MY_VARIABLE == 'valor_indesejado' }
        }
        equals {
            expression { MY_VARIABLE }
            value 'valor_padrao'
        }
    }
}
